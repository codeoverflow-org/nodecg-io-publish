"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GameTTSClient = void 0;
const tslib_1 = require("tslib");
const node_fetch_1 = tslib_1.__importDefault(require("node-fetch"));
const nodecg_io_core_1 = require("nodecg-io-core");
const voiceMap_1 = require("./voiceMap");
class GameTTSClient {
    constructor(config) {
        this.config = config;
    }
    buildBaseURL() {
        const protocol = this.config.useHttps ? "https" : "http";
        return `${protocol}://${this.config.host}`;
    }
    async executeRequest(path) {
        const response = await (0, node_fetch_1.default)(this.buildBaseURL() + path);
        if (!response.ok) {
            throw new Error(`Failed to execute gametts request: ${await response.text()}`);
        }
        return response;
    }
    /**
     * Get all the ids of all voices that gametts supports with a voice name as the object key.
     */
    getVoices() {
        const voiceEntries = Object.entries(voiceMap_1.voiceMap).map(([key, value]) => [key, parseInt(value)]);
        return Object.fromEntries(voiceEntries);
    }
    /**
     * Generates a URL to a .wav file with the spoken text that is generated using GameTTS:
     */
    generateWavUrl(text, voiceId) {
        const params = new URLSearchParams({ text, speaker_id: voiceId.toString() });
        return `${this.buildBaseURL()}/?${params}`;
    }
    /**
     * Downloads the .wav file from the given URL and returns it as a Buffer.
     * @param url the url generated by {@link generateWavUrl}
     * @returns the wav file
     */
    async getWavData(url) {
        const response = await (0, node_fetch_1.default)(url);
        if (!response.ok) {
            throw new Error(`Failed to fetch wav audio data: ${await response.text()}`);
        }
        return await response.arrayBuffer();
    }
    async isGameTTSAvailable() {
        try {
            await this.executeRequest("");
            return (0, nodecg_io_core_1.emptySuccess)();
        }
        catch (err) {
            return (0, nodecg_io_core_1.error)(`Failed to connect to gametts instance at ${this.buildBaseURL()}: ${err}`);
        }
    }
}
exports.GameTTSClient = GameTTSClient;
//# sourceMappingURL=gameTtsClient.js.map